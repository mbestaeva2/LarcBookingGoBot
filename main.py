import telebot
from telebot import types

# Replace 'YOUR_BOT_TOKEN_HERE' with your bot's API token
API_TOKEN = '7606923892:AAFTaq2UnGukug2VJJGZsN1NRrbgFeaICvQ'
# Replace with the Telegram user ID of the admin who will receive transfer requests
ADMIN_ID = 561665893

bot = telebot.TeleBot(API_TOKEN)
user_data = {}

def show_main_menu(chat_id):
    """Display the main menu with options."""
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üöï –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data="book_transfer"))
    markup.add(types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö", callback_data="info_docs"))
    # This button opens a URL (e.g., a chat with admins or an external FAQ link)
    markup.add(types.InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", url="https://t.me/TransferTbilisi"))
    bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

def show_back_to_menu_button(chat_id):
    """Send a prompt with a 'Return to menu' button."""
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
    bot.send_message(chat_id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)

@bot.message_handler(commands=['start'])
def start_command(message):
    """Handle the /start command by showing the main menu."""
    show_main_menu(message.chat.id)

# Step-by-step handlers for the booking process
def process_name(message):
    chat_id = message.chat.id
    user_data[chat_id]['name'] = message.text
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É:")
    bot.register_next_step_handler(message, process_date)

def process_date(message):
    chat_id = message.chat.id
    user_data[chat_id]['date'] = message.text
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    bot.register_next_step_handler(message, process_phone)

def process_phone(message):
    chat_id = message.chat.id
    user_data[chat_id]['phone'] = message.text
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:")
    bot.register_next_step_handler(message, process_route)

def process_route(message):
    chat_id = message.chat.id
    user_data[chat_id]['route'] = message.text
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:")
    bot.register_next_step_handler(message, process_passengers)

def process_passengers(message):
    chat_id = message.chat.id
    user_data[chat_id]['passengers'] = message.text
    # After collecting all text fields, prompt for location selection with inline buttons
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–ê—ç—Ä–æ–ø–æ—Ä—Ç", callback_data="loc-airport"),
        types.InlineKeyboardButton("–ñ/–¥ –≤–æ–∫–∑–∞–ª", callback_data="loc-station")
    )
    markup.add(
        types.InlineKeyboardButton("–° –∞–¥—Ä–µ—Å–∞ –≤–æ –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑–µ", callback_data="loc-address"),
        types.InlineKeyboardButton("–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ –î–∏–¥—É–±–µ", callback_data="loc-didube")
    )
    markup.add(types.InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="loc-other"))
    bot.send_message(chat_id, "–û—Ç–∫—É–¥–∞ –±—É–¥–µ—Ç –≤—ã–µ–∑–¥? –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:", reply_markup=markup)

def finish_booking(call):
    """Compile the request summary and ask for confirmation or cancellation."""
    chat_id = call.message.chat.id
    # Determine the chosen location text from the callback data
    location_key = call.data.split('-', 1)[1]
    loc_names = {
        "airport": "–ê—ç—Ä–æ–ø–æ—Ä—Ç",
        "station": "–ñ/–¥ –≤–æ–∫–∑–∞–ª",
        "address": "–° –∞–¥—Ä–µ—Å–∞ –≤–æ –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑–µ",
        "didube": "–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ –î–∏–¥—É–±–µ",
        "other": "–î—Ä—É–≥–æ–µ"
    }
    user_data[chat_id]['location'] = loc_names.get(location_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    data = user_data[chat_id]
    # Prepare a summary of the collected data
    summary_text = (
        f"üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
        f"–ò–º—è: {data['name']}\n"
        f"–î–∞—Ç–∞: {data['date']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–ú–∞—Ä—à—Ä—É—Ç: {data['route']}\n"
        f"–ü–∞—Å—Å–∞–∂–∏—Ä—ã: {data['passengers']}\n"
        f"–õ–æ–∫–∞—Ü–∏—è: {data['location']}\n\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?"
    )
    # Inline keyboard for confirmation (submit) or cancellation
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    )
    bot.send_message(chat_id, summary_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    """Handle all callback queries from inline buttons."""
    chat_id = call.message.chat.id
    if call.data == "book_transfer":
        # User chose to start a transfer booking
        bot.answer_callback_query(call.id)
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
        user_data[chat_id] = {}  # initialize storage for this user
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(sent, process_name)
    elif call.data.startswith("loc-"):
        # Location selected in the booking process
        bot.answer_callback_query(call.id)
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
        finish_booking(call)
    elif call.data == "confirm":
        # User confirmed the request
        data = user_data.get(chat_id)
        if data:
            # Send the request details to admin
            request_text = (
                f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä:\n"
                f"–ò–º—è: {data['name']}\n"
                f"–î–∞—Ç–∞: {data['date']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
                f"–ú–∞—Ä—à—Ä—É—Ç: {data['route']}\n"
                f"–ü–∞—Å—Å–∞–∂–∏—Ä—ã: {data['passengers']}\n"
                f"–õ–æ–∫–∞—Ü–∏—è: {data['location']}"
            )
            bot.send_message(ADMIN_ID, request_text)
        bot.answer_callback_query(call.id)
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
        bot.send_message(chat_id, "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ")
        show_back_to_menu_button(chat_id)
        user_data.pop(chat_id, None)  # clear stored data
    elif call.data == "cancel":
        # User canceled the request
        bot.answer_callback_query(call.id)
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
        bot.send_message(chat_id, "–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå")
        show_back_to_menu_button(chat_id)
        user_data.pop(chat_id, None)
    elif call.data == "back_to_menu":
        # User wants to return to the main menu
        bot.answer_callback_query(call.id)
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
        show_main_menu(chat_id)
    elif call.data == "info_docs":
        # User requested information about documents
        bot.answer_callback_query(call.id)
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
        bot.send_message(chat_id, "–î–ª—è –ø–æ–µ–∑–¥–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –ø—Ä–∏ —Å–µ–±–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏–µ –ª–∏—á–Ω–æ—Å—Ç—å.")
        show_main_menu(chat_id)

# Start the bot
bot.polling(none_stop=True)
