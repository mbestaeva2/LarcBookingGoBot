
from telebot import TeleBot, types
import os

TOKEN = os.getenv("BOT_TOKEN")
bot = TeleBot(TOKEN)

ADMIN_ID = 561665893

user_data = {}

def calculate_price(adults, children, animals):
    price_adult = 3000
    price_child = 2000
    price_pet = 500

    usd_rate = 92.0
    gel_rate = 30.0
    eur_rate = 100.0

    total_rub = adults * price_adult + children * price_child + animals * price_pet
    total_passengers = adults + children + animals

    if total_passengers >= 7:
        discount_percent = 15
    elif total_passengers >= 5:
        discount_percent = 10
    elif total_passengers >= 3:
        discount_percent = 5
    else:
        discount_percent = 0

    discount_amount = total_rub * (discount_percent / 100)
    final_total_rub = total_rub - discount_amount

    total_usd = round(final_total_rub / usd_rate, 2)
    total_gel = round(final_total_rub / gel_rate, 2)
    total_eur = round(final_total_rub / eur_rate, 2)

    return {
        "passengers": total_passengers,
        "discount_percent": discount_percent,
         "initial_rub": total_rub,
        "final_rub": round(final_total_rub, 2),
        "final_usd": total_usd,
        "final_gel": total_gel,
        "final_eur": total_eur
    }

@bot.message_handler(commands=['start'])
def handle_start(message):
    show_main_menu(message.chat.id)

def show_main_menu(chat_id):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="start_booking"),
        types.InlineKeyboardButton("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö", callback_data="info"),
        types.InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", url="https://t.me/TransverTbilisi")
    )
    bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

from telebot import types

def ask_phone(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button = types.KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
    markup.add(button)
    bot.send_message(chat_id, "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)
    
@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    chat_id = message.chat.id
    if message.contact:
        user_data[chat_id]["phone"] = message.contact.phone_number
        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω ‚úÖ", reply_markup=types.ReplyKeyboardRemove())
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        ask_location(chat_id)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É ‚Äî –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("–ê—ç—Ä–æ–ø–æ—Ä—Ç", callback_data="loc_airport"),
            types.InlineKeyboardButton("–ñ/–¥ –≤–æ–∫–∑–∞–ª", callback_data="loc_station"),
            types.InlineKeyboardButton("–° –∞–¥—Ä–µ—Å–∞ –≤–æ –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑–µ", callback_data="loc_address"),
            types.InlineKeyboardButton("–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ –î–∏–¥—É–±–µ", callback_data="loc_didube"),
            types.InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="loc_other")
        )
        bot.send_message(chat_id, "–û—Ç–∫—É–¥–∞ –±—É–¥–µ—Ç –≤—ã–µ–∑–¥?", reply_markup=markup)
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    chat_id = call.message.chat.id
    if call.data == "start_booking":
        user_data[chat_id] = {}
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è:")
        bot.register_next_step_handler(msg, get_name)

    elif call.data.startswith("route_"):
        user_data[chat_id]["route"] = call.data.split("_", 1)[1]
        ask_phone(chat_id)

    elif call.data.startswith("loc_"):
        locs = {
            "airport": "–ê—ç—Ä–æ–ø–æ—Ä—Ç",
            "station": "–ñ/–¥ –≤–æ–∫–∑–∞–ª",
            "address": "–° –∞–¥—Ä–µ—Å–∞ –≤–æ –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑–µ",
            "didube": "–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ –î–∏–¥—É–±–µ",
            "other": "–î—Ä—É–≥–æ–µ"
        }
        
        user_data[chat_id]["location"] = locs.get(call.data.split("_", 1)[1], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        finish_booking(chat_id)
        #show_summary(chat_id)

    elif call.data == "confirm_yes":
        data = user_data.get(chat_id, {})
        text = f"""üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!
–ò–º—è: {data.get('name')}
–î–∞—Ç–∞: {data.get('date')}
–ú–∞—Ä—à—Ä—É—Ç: {data.get('route')}
–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}
–ü–∞—Å—Å–∞–∂–∏—Ä—ã: {data.get('passengers')}
–õ–æ–∫–∞—Ü–∏—è: {data.get('location')}
"""
        bot.send_message(ADMIN_ID, text)
        bot.send_message(chat_id, "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ")
        show_main_menu(chat_id)

    elif call.data == "confirm_no":
        bot.send_message(chat_id, "–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå")
        show_main_menu(chat_id)

    elif call.data == "info":
        bot.send_message(chat_id, "–î–ª—è –ø–æ–µ–∑–¥–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å\n"
                         "*–∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç(–æ–±—å—è–∑–∞—Ç–µ–ª—å–Ω–æ, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–µ –ø–æ–¥–æ–π–¥–µ—Ç)\n"
                        "*–ó–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç —Ä–µ–±–µ–Ω–∫–∞, —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ —Ä–æ–∂–¥–µ–Ω–∏–∏(–Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å)\n"
                        "*–î–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö: –í–µ—Ç–ø–∞—Å–ø–æ—Ä—Ç —Å –ø—Ä–∏–≤–∏–≤–∫–æ–π –æ—Ç –±–µ—à–µ–Ω—Å—Ç–≤–∞,\n"
                        "–°–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã ‚Ññ1\n"
                        "–ù–∞–ª–∏—á–∏–µ —á–∏–ø–∞(–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ")
        show_main_menu(chat_id)

def get_name(message):
    chat_id = message.chat.id
    user_data[chat_id]["name"] = message.text
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22.07):")
    bot.register_next_step_handler(msg, get_date)

def get_date(message):
    chat_id = message.chat.id
    user_data[chat_id]["date"] = message.text
    msg = bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –≤–∑—Ä–æ—Å–ª—ã—Ö?")
    bot.register_next_step_handler(msg, get_passengers)

def get_passengers(message):
    chat_id = message.chat.id
    user_data[chat_id]["passengers"] = message.text
    msg = bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π? üë∂:")
    bot.register_next_step_handler(msg, get_children)

def get_children(message):
    chat_id = message.chat.id
    user_data[chat_id]["children"] = message.text
    msg = bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö? üê∂:")
    bot.register_next_step_handler(msg, get_animals)    
def get_animals(message):
    chat_id = message.chat.id
    user_data[chat_id]["animals"] = message.text
    # –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –≤—Å—ë —Å–æ–±—Ä–∞–Ω–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –¢–±–∏–ª–∏—Å–∏", callback_data="route_–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –¢–±–∏–ª–∏—Å–∏"),
        types.InlineKeyboardButton("–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –°—Ç–µ–ø–∞–Ω—Ü–º–∏–Ω–¥–∞", callback_data="route_–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –°—Ç–µ–ø–∞–Ω—Ü–º–∏–Ω–¥–∞"),
        types.InlineKeyboardButton("–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –ö—É—Ç–∞–∏—Å–∏", callback_data="route_–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –ö—É—Ç–∞–∏—Å–∏"),
        types.InlineKeyboardButton("–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –ë–∞—Ç—É–º–∏", callback_data="route_–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –ë–∞—Ç—É–º–∏"),
        types.InlineKeyboardButton("–¢–±–∏–ª–∏—Å–∏ ‚Äî –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑", callback_data="route_–¢–±–∏–ª–∏—Å–∏ ‚Äî –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑")
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:", reply_markup=markup)
def get_phone(message):
    chat_id = message.chat.id
    user_data[chat_id]["phone"] = message.text
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–ê—ç—Ä–æ–ø–æ—Ä—Ç", callback_data="loc_airport"),
        types.InlineKeyboardButton("–ñ/–¥ –≤–æ–∫–∑–∞–ª", callback_data="loc_station"),
        types.InlineKeyboardButton("–° –∞–¥—Ä–µ—Å–∞ –≤–æ –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑–µ", callback_data="loc_address"),
        types.InlineKeyboardButton("–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ –î–∏–¥—É–±–µ", callback_data="loc_didube"),
        types.InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="loc_other"),
    )
    bot.send_message(chat_id, "–û—Ç–∫—É–¥–∞ –±—É–¥–µ—Ç –≤—ã–µ–∑–¥?", reply_markup=markup)

def get_passengers(message):
    chat_id = message.chat.id
    user_data[chat_id]["passengers"] = message.text
    msg = bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π? üë∂:")
    bot.register_next_step_handler(msg, get_children)

def get_children(message):
    chat_id = message.chat.id
    user_data[chat_id]["children"] = message.text
    msg = bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö? üê∂:")
    bot.register_next_step_handler(msg, get_animals)    
def get_animals(message):
    chat_id = message.chat.id
    user_data[chat_id]["animals"] = message.text
    # –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –≤—Å—ë —Å–æ–±—Ä–∞–Ω–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –¢–±–∏–ª–∏—Å–∏", callback_data="route_–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –¢–±–∏–ª–∏—Å–∏"),
        types.InlineKeyboardButton("–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –°—Ç–µ–ø–∞–Ω—Ü–º–∏–Ω–¥–∞", callback_data="route_–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –°—Ç–µ–ø–∞–Ω—Ü–º–∏–Ω–¥–∞"),
        types.InlineKeyboardButton("–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –ö—É—Ç–∞–∏—Å–∏", callback_data="route_–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –ö—É—Ç–∞–∏—Å–∏"),
        types.InlineKeyboardButton("–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –ë–∞—Ç—É–º–∏", callback_data="route_–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –ë–∞—Ç—É–º–∏"),
        types.InlineKeyboardButton("–¢–±–∏–ª–∏—Å–∏ ‚Äî –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑", callback_data="route_–¢–±–∏–ª–∏—Å–∏ ‚Äî –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑")
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:", reply_markup=markup)
def get_phone(message):
    chat_id = message.chat.id
    user_data[chat_id]["phone"] = message.text
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–ê—ç—Ä–æ–ø–æ—Ä—Ç", callback_data="loc_airport"),
        types.InlineKeyboardButton("–ñ/–¥ –≤–æ–∫–∑–∞–ª", callback_data="loc_station"),
        types.InlineKeyboardButton("–° –∞–¥—Ä–µ—Å–∞ –≤–æ –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑–µ", callback_data="loc_address"),
        types.InlineKeyboardButton("–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ –î–∏–¥—É–±–µ", callback_data="loc_didube"),
        types.InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="loc_other"),
    )
    bot.send_message(chat_id, "–û—Ç–∫—É–¥–∞ –±—É–¥–µ—Ç –≤—ã–µ–∑–¥?", reply_markup=markup)

def get_passengers(message):
    chat_id = message.chat.id
    user_data[chat_id]["passengers"] = message.text
    msg = bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π? üë∂:")
    bot.register_next_step_handler(msg, get_children)

def get_children(message):
    chat_id = message.chat.id
    user_data[chat_id]["children"] = message.text
    msg = bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö? üê∂:")
    bot.register_next_step_handler(msg, get_animals)    
def get_animals(message):
    chat_id = message.chat.id
    user_data[chat_id]["animals"] = message.text
    # –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –≤—Å—ë —Å–æ–±—Ä–∞–Ω–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –¢–±–∏–ª–∏—Å–∏", callback_data="route_–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –¢–±–∏–ª–∏—Å–∏"),
        types.InlineKeyboardButton("–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –°—Ç–µ–ø–∞–Ω—Ü–º–∏–Ω–¥–∞", callback_data="route_–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –°—Ç–µ–ø–∞–Ω—Ü–º–∏–Ω–¥–∞"),
        types.InlineKeyboardButton("–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –ö—É—Ç–∞–∏—Å–∏", callback_data="route_–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –ö—É—Ç–∞–∏—Å–∏"),
        types.InlineKeyboardButton("–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –ë–∞—Ç—É–º–∏", callback_data="route_–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –ë–∞—Ç—É–º–∏"),
        types.InlineKeyboardButton("–¢–±–∏–ª–∏—Å–∏ ‚Äî –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑", callback_data="route_–¢–±–∏–ª–∏—Å–∏ ‚Äî –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑")
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:", reply_markup=markup)
    
def ask_phone(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button = types.KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
    markup.add(button)
    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)
    
def finish_booking(chat_id):
    data = user_data.get(chat_id, {})

    try:
        adults = int(data.get("passengers", "0"))
        children = int(data.get("children", "0"))
        animals = int(data.get("animals", "0"))

        result = calculate_price(adults, children, animals)

        price_message = f"""
üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏:

üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤: {adults} –≤–∑—Ä–æ—Å–ª—ã—Ö, {children} –¥–µ—Ç–µ–π
üê∂ –ñ–∏–≤–æ—Ç–Ω—ã—Ö: {animals}

üéÅ –°–∫–∏–¥–∫–∞: {result['discount_percent']}%
üíµ –°—É–º–º–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏: {result['initial_rub']} ‚ÇΩ
‚úÖ –°—É–º–º–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: {result['final_rub']} ‚ÇΩ

üí≤ –í –¥–æ–ª–ª–∞—Ä–∞—Ö: {result['final_usd']} $
üí∂ –í –µ–≤—Ä–æ: {result['final_eur']} ‚Ç¨
üá¨üá™ –í –ª–∞—Ä–∏: {result['final_gel']} ‚Çæ
"""
        bot.send_message(chat_id, price_message)

        summary = f"""üîé –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:

üë§ –ò–º—è: {data.get('name')}
üìÖ –î–∞—Ç–∞: {data.get('date')}
üìç –ú–∞—Ä—à—Ä—É—Ç: {data.get('route')}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}
üßç –ü–∞—Å—Å–∞–∂–∏—Ä—ã: {data.get('passengers')}
üë∂ –î–µ—Ç–∏: {data.get('children')}
üêæ –ñ–∏–≤–æ—Ç–Ω—ã–µ: {data.get('animals')}
üöó –õ–æ–∫–∞—Ü–∏—è: {data.get('location')}

–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?
"""

        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="confirm_yes"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")
        )

        bot.send_message(chat_id, summary, reply_markup=markup)

    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ: {e}")


if __name__ == '__main__':
    bot.polling(none_stop=True, timeout=60)
