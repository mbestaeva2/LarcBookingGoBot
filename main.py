import os
import telebot
from telebot import types
from datetime import datetime

TOKEN = os.getenv("TOKEN")  # –±–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_ID = 561665893
print("TOKEN = ", TOKEN)
bot = telebot.TeleBot(TOKEN)
user_data = {}

def get_greeting():
    hour = datetime.now().hour
    if hour < 12:
        return "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! üåû"
    elif hour < 17:
        return "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! üå§"
    elif hour < 22:
        return "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! üåá"
    else:
        return "–î–æ–±—Ä–æ–π –Ω–æ—á–∏! üåô"

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("üöê –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data="start_booking"),
        types.InlineKeyboardButton("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö", callback_data="info"),
        types.InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", url="https://t.me/TransverTbilisi")
    )
    bot.send_message(message.chat.id, f"{get_greeting()} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    chat_id = call.message.chat.id
    if call.data == "start_booking":
        user_data[chat_id] = {}
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(call.message, get_name)
    elif call.data.startswith("route_"):
        route = call.data.split("_", 1)[1]
        user_data[chat_id]["route"] = route
        send_location_options(chat_id)
    elif call.data.startswith("loc_"):
        finish_booking(call)
    elif call.data.startswith("pass_"):
        user_data[chat_id]["passengers"] = call.data.split("_", 1)[1]
        send_route_options(chat_id)

def get_name(message):
    chat_id = message.chat.id
    user_data[chat_id]["name"] = message.text
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 21.07):")
    bot.register_next_step_handler(message, get_date)

def get_date(message):
    chat_id = message.chat.id
    user_data[chat_id]["date"] = message.text
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    bot.register_next_step_handler(message, get_phone)

def get_phone(message):
    chat_id = message.chat.id
    user_data[chat_id]["phone"] = message.text
    send_passenger_count(chat_id)

def send_passenger_count(chat_id):
    markup = types.InlineKeyboardMarkup()
    for i in range(1, 6):
        markup.add(types.InlineKeyboardButton(f"{i} —á–µ–ª–æ–≤–µ–∫", callback_data=f"pass_{i}"))
    bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤?", reply_markup=markup)

def send_route_options(chat_id):
    markup = types.InlineKeyboardMarkup(row_width=1)
    routes = [
        "–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –¢–±–∏–ª–∏—Å–∏",
        "–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –°—Ç–µ–ø–∞–Ω—Ü–º–∏–Ω–¥–∞",
        "–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –ö—É—Ç–∞–∏—Å–∏",
        "–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –ë–∞—Ç—É–º–∏",
        "–¢–±–∏–ª–∏—Å–∏ ‚Äî –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑"
    ]
    for route in routes:
        markup.add(types.InlineKeyboardButton(route, callback_data=f"route_{route}"))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:", reply_markup=markup)

def send_location_options(chat_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–ê—ç—Ä–æ–ø–æ—Ä—Ç", callback_data="loc_airport"),
        types.InlineKeyboardButton("–ñ/–¥ –≤–æ–∫–∑–∞–ª", callback_data="loc_station"),
        types.InlineKeyboardButton("–° –∞–¥—Ä–µ—Å–∞ –≤–æ –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑–µ", callback_data="loc_address"),
        types.InlineKeyboardButton("–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ –î–∏–¥—É–±–µ", callback_data="loc_didube"),
        types.InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="loc_other")
    )
    bot.send_message(chat_id, "–û—Ç–∫—É–¥–∞ –±—É–¥–µ—Ç –≤—ã–µ–∑–¥?", reply_markup=markup)

def finish_booking(call):
    chat_id = call.message.chat.id
    location = call.data.split("_", 1)[1]
    loc_names = {
        "airport": "–ê—ç—Ä–æ–ø–æ—Ä—Ç",
        "station": "–ñ/–¥ –≤–æ–∫–∑–∞–ª",
        "address": "–° –∞–¥—Ä–µ—Å–∞ –≤–æ –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑–µ",
        "didube": "–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ –î–∏–¥—É–±–µ",
        "other": "–î—Ä—É–≥–æ–µ"
    }
    user_data[chat_id]["location"] = loc_names.get(location, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    data = user_data[chat_id]
    message_text = f"""üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!

–ò–º—è: {data['name']}
–î–∞—Ç–∞: {data['date']}
–ú–∞—Ä—à—Ä—É—Ç: {data['route']}
–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}
    –ü–∞—Å—Å–∞–∂–∏—Ä—ã: {data['passengers']}
–õ–æ–∫–∞—Ü–∏—è: {data['location']}
"""
    bot.send_message("@TransverTbilisi", message_text)
    bot.send_message(chat_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. [–ß–∞—Ç —Å –∞–¥–º–∏–Ω–∞–º–∏](https://t.me/TransverTbilisi)", parse_mode="Markdown")

if __name__ == '__main__':
    bot.polling(none_stop=True)
    
