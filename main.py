import os
from telebot import TeleBot, types
from datetime import datetime

# ===== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =====
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

# chat_id –≤–∞—à–µ–π –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—ã (–æ—Å—Ç–∞–≤—å –∫–∞–∫ —É —Ç–µ–±—è)
ADMIN_GROUP_ID = -4948043121

bot = TeleBot(TOKEN, parse_mode="HTML")

# –ü–∞–º—è—Ç—å –Ω–∞ —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}  # {chat_id: {"name":..., "adults":..., "children":..., "animals":..., "route":..., "phone":..., "price":...}}

# ===== –£—Ç–∏–ª–∏—Ç—ã =====
def get_tariffs(route: str):
    """–¶–µ–Ω—ã –∑–∞ –æ–¥–Ω–æ–≥–æ: (adult, child, pet)"""
    if "–ë–∞—Ç—É–º–∏" in route:
        return 6000, 4000, 1000
    if "–ö—É—Ç–∞–∏—Å–∏" in route:
        return 5000, 3500, 800
    if "–°—Ç–µ–ø–∞–Ω—Ü–º–∏–Ω–¥–∞" in route:
        return 2000, 1500, 500
    # –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –¢–±–∏–ª–∏—Å–∏ –∏ –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    return 3000, 2000, 500

def calculate_price(adults, children, animals, route):
    price_adult, price_child, price_pet = get_tariffs(route)
    total = adults * price_adult + children * price_child + animals * price_pet
    return total, price_adult, price_child, price_pet

def ensure_session(chat_id):
    user_data.setdefault(chat_id, {
        "name": None,
        "adults": None,
        "children": None,
        "animals": None,
        "route": None,
        "phone": None,
        "price": None,
    })

# ===== –°–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã =====
@bot.message_handler(commands=['id'])
def chat_id_cmd(message):
    chat = message.chat
    user = message.from_user
    lines = [
        f"–¢–∏–ø —á–∞—Ç–∞: <b>{chat.type}</b>",
        f"Chat ID: <code>{chat.id}</code>",
        f"User ID: <code>{user.id}</code>",
    ]
    if chat.type in ('group', 'supergroup'):
        lines.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞: {chat.title}")
    bot.reply_to(message, "\n".join(lines))

@bot.message_handler(commands=['start'])
def start_command(message):
    chat_id = message.chat.id
    ensure_session(chat_id)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("–†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏"))
    bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "–†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
def start_flow(message):
    chat_id = message.chat.id
    ensure_session(chat_id)
    msg = bot.send_message(chat_id, "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    bot.register_next_step_handler(msg, get_name)

def get_name(message):
    chat_id = message.chat.id
    ensure_session(chat_id)
    user_data[chat_id]["name"] = (message.text or "").strip() or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    msg = bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –≤–∑—Ä–æ—Å–ª—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤? (—á–∏—Å–ª–æ–º)")
    bot.register_next_step_handler(msg, get_adults)

def get_adults(message):
    chat_id = message.chat.id
    ensure_session(chat_id)
    try:
        user_data[chat_id]["adults"] = max(0, int(message.text))
    except Exception:
        msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –°–∫–æ–ª—å–∫–æ –≤–∑—Ä–æ—Å–ª—ã—Ö?")
        return bot.register_next_step_handler(msg, get_adults)
    msg = bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π? (—á–∏—Å–ª–æ–º)")
    bot.register_next_step_handler(msg, get_children)

def get_children(message):
    chat_id = message.chat.id
    ensure_session(chat_id)
    try:
        user_data[chat_id]["children"] = max(0, int(message.text))
    except Exception:
        msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –°–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π?")
        return bot.register_next_step_handler(msg, get_children)
    msg = bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö? (—á–∏—Å–ª–æ–º)")
    bot.register_next_step_handler(msg, get_animals)

def get_animals(message):
    chat_id = message.chat.id
    ensure_session(chat_id)
    try:
        user_data[chat_id]["animals"] = max(0, int(message.text))
    except Exception:
        msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –°–∫–æ–ª—å–∫–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö?")
        return bot.register_next_step_handler(msg, get_animals)

    # –≤—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞
    kb = types.InlineKeyboardMarkup()
    for route in [
        "–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –¢–±–∏–ª–∏—Å–∏",
        "–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –°—Ç–µ–ø–∞–Ω—Ü–º–∏–Ω–¥–∞",
        "–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –ö—É—Ç–∞–∏—Å–∏",
        "–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –ë–∞—Ç—É–º–∏",

]:
        kb.add(types.InlineKeyboardButton(route, callback_data=f"route:{route}"))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("route:"))
def on_route_selected(call):
    chat_id = call.message.chat.id
    route = call.data.split("route:", 1)[1]
    ensure_session(chat_id)
    d = user_data[chat_id]

    d["route"] = route
    total, pa, pc, pp = calculate_price(d["adults"] or 0, d["children"] or 0, d["animals"] or 0, route)
    d["price"] = total

    # –∫–Ω–æ–ø–∫–∞ ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É¬ª
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="confirm"))
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text=f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É <b>{route}</b>: <b>{total} —Ä—É–±.</b>",
        parse_mode="HTML"
    )
    bot.send_message(chat_id, "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data == "confirm")
def ask_phone(call):
    chat_id = call.message.chat.id
    ensure_session(chat_id)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True))
    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–∞—è–≤–∫–∏.", reply_markup=kb)

@bot.message_handler(content_types=['contact'])
def got_contact(message):
    chat_id = message.chat.id
    ensure_session(chat_id)
    if message.contact and message.contact.phone_number:
        user_data[chat_id]["phone"] = message.contact.phone_number

    # –º–µ—Å—Ç–æ –≤—ã–µ–∑–¥–∞
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("–ê—ç—Ä–æ–ø–æ—Ä—Ç", callback_data="loc:airport"),
        types.InlineKeyboardButton("–ñ/–¥ –≤–æ–∫–∑–∞–ª", callback_data="loc:station"),
        types.InlineKeyboardButton("–° –∞–¥—Ä–µ—Å–∞ –≤–æ –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑–µ", callback_data="loc:address"),
        types.InlineKeyboardButton("–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ –î–∏–¥—É–±–µ", callback_data="loc:didube"),
        types.InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="loc:other"),
    )
    bot.send_message(chat_id, "–û—Ç–∫—É–¥–∞ –±—É–¥–µ—Ç –≤—ã–µ–∑–¥?", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("loc:"))
def finish_booking(call):
    chat_id = call.message.chat.id
    ensure_session(chat_id)
    d = user_data[chat_id]
    location = call.data.split("loc:", 1)[1]

    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    name = d.get("name") or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    route = d.get("route") or "-"
    adults = d.get("adults") or 0
    children = d.get("children") or 0
    animals = d.get("animals") or 0
    phone = d.get("phone") or "-"
    total, pa, pc, pp = calculate_price(adults, children, animals, route)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–≤ –≥—Ä—É–ø–ø—É)
    admin_text = (
        "üßæ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>:\n"
        f"–ò–º—è: {name}\n"
        f"–ú–∞—Ä—à—Ä—É—Ç: {route}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: <a href='tel:{phone}'>{phone}</a>\n"
        f"–ú–µ—Å—Ç–æ –≤—ã–µ–∑–¥–∞: {location}\n"
        f"–í–∑—Ä–æ—Å–ª—ã–µ: {adults} √ó {pa} = {adults * pa} —Ä—É–±.\n"
        f"–î–µ—Ç–∏: {children} √ó {pc} = {children * pc} —Ä—É–±.\n"
        f"–ñ–∏–≤–æ—Ç–Ω—ã–µ: {animals} √ó {pp} = {animals * pp} —Ä—É–±.\n"
        f"<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total} —Ä—É–±.</b>"
    )
    bot.send_message(ADMIN_GROUP_ID, admin_text, disable_web_page_preview=True)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Å —Ç–µ–º –∂–µ —Ä–∞–∑–±–æ—Ä–æ–º)
    user_text = (
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.\n\n"
        f"–í–∑—Ä–æ—Å–ª—ã–µ: {adults} √ó {pa} = {adults * pa} —Ä—É–±.\n"
        f"–î–µ—Ç–∏: {children} √ó {pc} = {children * pc} —Ä—É–±.\n"
        f"–ñ–∏–≤–æ—Ç–Ω—ã–µ: {animals} √ó {pp} = {animals * pp} —Ä—É–±.\n"
        f"<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total} —Ä—É–±.</b>"
    )
    bot.send_message(chat_id, user_text)

# ===== –ó–∞–ø—É—Å–∫ =====
if name == "__main__":
    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–±–∏—Ä–∞–µ–º –≤–µ–±—Ö—É–∫ (–µ—Å–ª–∏ —Ä–∞–Ω—å—à–µ –≥–¥–µ-—Ç–æ –≤–∫–ª—é—á–∞–ª—Å—è)
    try:
        bot.remove_webhook()
    except Exception:
        pass

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω‚Ä¶", datetime.now().isoformat())
    # –û–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å, –æ–¥–∏–Ω –∏–Ω—Å—Ç–∞–Ω—Å ‚Üí 409 –Ω–µ –±—É–¥–µ—Ç
    bot.

–ú–í, [09.08.2025 5:40]
infinity_polling(skip_pending=True, timeout=20, long_polling_timeout=20)
