
from telebot import TeleBot, types

bot = TeleBot("7606923892:AAHXgO5n0xnNE6HpEeNmwWAbJCLnnQtGoGA")

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("üöê –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data="start_booking")
    )
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)

user_data = {}

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    chat_id = call.message.chat.id

    if call.data == "start_booking":
        user_data[chat_id] = {}
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(call.message, get_name)

def get_name(message):
    chat_id = message.chat.id
    user_data[chat_id]["name"] = message.text

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –¢–±–∏–ª–∏—Å–∏", callback_data="route1"),
        types.InlineKeyboardButton("–¢–±–∏–ª–∏—Å–∏ ‚Äî –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑", callback_data="route2")
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("route"))
def get_route(call):
    chat_id = call.message.chat.id
    user_data[chat_id]["route"] = "–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑ ‚Äî –¢–±–∏–ª–∏—Å–∏" if call.data == "route1" else "–¢–±–∏–ª–∏—Å–∏ ‚Äî –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑"

    markup = types.InlineKeyboardMarkup()
    times = ["09:00", "10:00", "11:00", "15:00", "19:00"]
    for time in times:
        markup.add(types.InlineKeyboardButton(time, callback_data=f"time_{time}"))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–µ–∑–¥–∞:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("time_"))
def get_time(call):
    chat_id = call.message.chat.id
    time = call.data.split("_")[1]
    user_data[chat_id]["time"] = time

    markup = types.InlineKeyboardMarkup(row_width=4)
    markup.add(
        types.InlineKeyboardButton("1", callback_data="pax_1"),
        types.InlineKeyboardButton("2", callback_data="pax_2"),
        types.InlineKeyboardButton("3", callback_data="pax_3"),
        types.InlineKeyboardButton("4+", callback_data="pax_4")
    )
    bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("pax_"))
def get_passengers(call):
    chat_id = call.message.chat.id
    user_data[chat_id]["passengers"] = call.data.split("_")[1]

    markup = types.InlineKeyboardMarkup()
    locations = [
        ("‚úàÔ∏è –ê—ç—Ä–æ–ø–æ—Ä—Ç", "loc_airport"),
        ("üöâ –ñ/–¥ –≤–æ–∫–∑–∞–ª", "loc_station"),
        ("üè† –° –∞–¥—Ä–µ—Å–∞ –≤–æ –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑–µ", "loc_address"),
        ("‚ùì –î—Ä—É–≥–æ–µ", "loc_other"),
        ("üöá –°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ –î–∏–¥—É–±–µ", "loc_didube")
    ]
    for label, callback in locations:
        markup.add(types.InlineKeyboardButton(label, callback_data=callback))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("loc_"))
def finish_booking(call):
    chat_id = call.message.chat.id
    location = call.data.split("_")[1]
    loc_names = {
        "airport": "–ê—ç—Ä–æ–ø–æ—Ä—Ç",
        "station": "–ñ/–¥ –≤–æ–∫–∑–∞–ª",
        "address": "–° –∞–¥—Ä–µ—Å–∞ –≤–æ –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑–µ",
        "other": "–î—Ä—É–≥–æ–µ",
        "didube": "–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ –î–∏–¥—É–±–µ"
    }
    user_data[chat_id]["location"] = loc_names.get(location, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    data = user_data[chat_id]
    text = (
        f"üöê –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!
"
        f"üë§ –ò–º—è: {data['name']}
"
        f"üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {data['route']}
"
        f"üïò –í—Ä–µ–º—è: {data['time']}
"
        f"üë• –ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤: {data['passengers']}
"
        f"üìç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data['location']}"
    )

    bot.send_message("@TransverTbilisi", text)
    bot.send_message(chat_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∞–º.
[–ß–∞—Ç —Å –∞–¥–º–∏–Ω–∞–º–∏](https://t.me/TransverTbilisi)", parse_mode="Markdown")

if __name__ == '__main__':
    bot.polling(none_stop=True)
